:

Response Message: اللي بتبعتها لعملائك أو النظام بعد كل عملية.

Database Notifications: لتخزين النوتيفيكيشنات في الـ DB.

SignalR: لإرسال الإشعارات في الوقت الفعلي (Real-Time).

أنت كده بتجمع كل الحاجات دي مع بعض عشان توفر تجربة كاملة من إظهار النوتيفيكيشن للمستخدمين بشكل سريع وفي الوقت الفعلي، مع تخزين كل حاجة في قاعدة البيانات.

هنمشي مع بعض خطوة بخطوة وننظم كل شيء بحيث يبقى واضح وواضح في الـ Backend.

الـ Flow المطلوب:
الـ Controller يستقبل طلب (مثلاً: مريض حجز معاد، دكتور نزل معاد جديد).

الـ Service يتعامل مع الطلب، يرسل إشعار إلى الـ Database.

الـ Notification يتم حفظها في الـ Database، ثم يتم إرسالها عبر SignalR إلى الـ User.

في النهاية، يتم إرسال Response Message للمستخدم في الـ API.

🧑‍💻 1. Model for Notifications (تخزين النوتيفيكيشن في الـ DB)
csharp
Copy
Edit
public class Notification
{
    public int Id { get; set; }
    public string UserId { get; set; }
    public string Title { get; set; }
    public string Message { get; set; }
    public bool IsRead { get; set; } = false;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}
🧑‍💻 2. Service Layer: NotificationService
في NotificationService، هنتعامل مع الـ Database و SignalR ونرسل إشعارات مع الرد المناسب للمستخدم.

NotificationService.cs
csharp
Copy
Edit
public class NotificationService : INotificationService
{
    private readonly AppDbContext _context;
    private readonly IHubContext<NotificationHub> _hubContext;

    public NotificationService(AppDbContext context, IHubContext<NotificationHub> hubContext)
    {
        _context = context;
        _hubContext = hubContext;
    }

    public async Task SendNotificationAsync(string userId, string title, string message)
    {
        // 1. تخزين النوتيفيكيشن في DB
        var notification = new Notification
        {
            UserId = userId,
            Title = title,
            Message = message
        };
        
        _context.Notifications.Add(notification);
        await _context.SaveChangesAsync();

        // 2. إرسال النوتيفيكيشن عبر SignalR للـ User
        await _hubContext.Clients.Group($"User_{userId}").SendAsync("ReceiveNotification", new
        {
            Title = title,
            Message = message,
            CreatedAt = notification.CreatedAt
        });

        // 3. إرسال Response للـ API
        return new ResponseMessage
        {
            Success = true,
            Message = "Notification sent successfully."
        };
    }

    // Notify the doctor when a patient books an appointment
    public async Task NotifyDoctorOfBooking(string doctorId, string patientName)
    {
        var title = "📅 حجز جديد";
        var message = $"المريض {patientName} حجز معاد جديد.";

        var response = await SendNotificationAsync(doctorId, title, message);
        return response;
    }

    // Notify patients when a doctor adds a new time slot
    public async Task NotifyPatientsOfDoctorUpdate(string doctorId)
    {
        var patientIds = await _context.Appointments
            .Where(a => a.DoctorId == doctorId)
            .Select(a => a.PatientId)
            .Distinct()
            .ToListAsync();

        var adminIds = await _userManager.GetUsersInRoleAsync("Admin");
        var adminUserIds = adminIds.Select(a => a.Id).ToList();

        var title = "معاد جديد متاح";
        var message = "دكتورك نزل معاد جديد احجز بسرعة!";

        foreach (var patientId in patientIds)
        {
            await SendNotificationAsync(patientId, title, message);
        }

        foreach (var adminId in adminUserIds)
        {
            await SendNotificationAsync(adminId, $"معاد جديد من دكتور {doctorId}", message);
        }
    }
}
ResponseMessage: هيكل الرسالة التي سترجع للمستخدم كـ Response من الـ API.
ResponseMessage.cs
csharp
Copy
Edit
public class ResponseMessage
{
    public bool Success { get; set; }
    public string Message { get; set; }
}
🧑‍💻 3. Controller Layer: NotificationController
هنا الـ Controller هيتعامل مع الطلبات من الـ API ويرد عليها باستخدام ResponseMessage.

NotificationController.cs
csharp
Copy
Edit
[ApiController]
[Route("api/[controller]")]
public class NotificationController : ControllerBase
{
    private readonly INotificationService _notificationService;
    private readonly UserManager<ApplicationUser> _userManager;

    public NotificationController(INotificationService notificationService, UserManager<ApplicationUser> userManager)
    {
        _notificationService = notificationService;
        _userManager = userManager;
    }

    // 1. مريض حجز معاد
    [HttpPost("patient-booked/{doctorId}/{patientName}")]
    public async Task<IActionResult> PatientBooked(string doctorId, string patientName)
    {
        var response = await _notificationService.NotifyDoctorOfBooking(doctorId, patientName);

        return Ok(response); // نرجع Response للمستخدم بعد ما يتم إرسال النوتيفيكيشن
    }

    // 2. دكتور نزل معاد جديد
    [HttpPost("doctor-time-updated/{doctorId}")]
    public async Task<IActionResult> DoctorTimeUpdated(string doctorId)
    {
        var response = await _notificationService.NotifyPatientsOfDoctorUpdate(doctorId);

        return Ok(response); // نرجع Response للمستخدم بعد ما يتم إرسال النوتيفيكيشن
    }
}
🧑‍💻 4. SignalR Hub
هنا بنستخدم الـ SignalR لإرسال الإشعارات في الوقت الفعلي (Real-Time) إلى المتصلين.

NotificationHub.cs
csharp
Copy
Edit
using Microsoft.AspNetCore.SignalR;

public class NotificationHub : Hub
{
    // Optional: Methods for joining groups
    public async Task JoinGroup(string groupName)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);
    }

    public async Task LeaveGroup(string groupName)
    {
        await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName);
    }
}
🧑‍💻 5. Program.cs or Startup.cs Configuration
في Program.cs أو Startup.cs، تأكد من إضافة الـ SignalR و الـ NotificationService.

csharp
Copy
Edit
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddSignalR();
        services.AddScoped<INotificationService, NotificationService>();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapHub<NotificationHub>("/notificationHub");
        });
    }
}
🧑‍💻 6. الخطوات النهائية
الـ Controller بيستقبل الطلبات من الـ API (مثلًا: مريض حجز أو دكتور نزل معاد).

الـ Service:

يتم إرسال النوتيفيكيشن إلى الـ DB.

يتم إرسال النوتيفيكيشن عبر SignalR للمستخدمين المتصلين.

يتم إرسال Response للمستخدم عبر الـ API.

SignalR: يقوم بإرسال الإشعار في الوقت الفعلي.

✅ خلاصة:
الـ Backend بينفذ كل شيء: تخزين النوتيفيكيشن في الـ DB، إرسال النوتيفيكيشن عبر SignalR، إرجاع Response للمستخدم.

الـ SignalR Hub بينقل الإشعارات للـ Users المتصلين في الوقت الفعلي.

الـ Controller بيبعت للمستخدمين في الـ API Response Messages لنجاح العملية.

هل الكود ده مظبوط ليك؟ لو فيه حاجة عايز تضيفها أو تعدل عليها قولي!








